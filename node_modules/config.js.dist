/**
 * cgid configuration file
 *
 * @package cgid
 * @license GPLv3
 */

module.exports = {

	/**
	 * IP address to listen on for incoming HTTP/HTTPS requests (default is 0.0.0.0)
	 */

	ipAddress: "0.0.0.0",

	/**
	 * pathname of root folder containing files available per HTTP
	 */

	webRoot : "/var/www",

	/**
	 * pathname of folder containing CGI scripts
	 *
	 * This pathname might be absolute pointing to folder not contained in
	 * webRoot configured above. Relative paths are resolved in relation to
	 * given webRoot.
	 */

	cgiRoot : "/var/lib/app/cgi-bin",

	/**
	 * URL prefix of CGI scripts
	 *
	 * Any URL matching this prefix is considered to select CGI scripts to be
	 * executed instead of retrieved. On matching prefix the tailor of URL
	 * pathname is resolved in relation to cgiRoot configured above.
	 */

	cgiPrefix : "/cgi-bin",

	/**
	 * name of user to run CGI scripts as
	 *
	 * Omit this or provide false here to run every script as its individual
	 * file owner. SECURITY WARNING: Ensure all scripts are owned by non-root
	 * users, then!
	 */

	runAsUser : "www-data",

	/**
	 * switch turning on/off HTTPS support on port 443
	 */

	enableHttps : true,

	/**
	 * filename of certificate file to use on providing HTTPS
	 *
	 * You may provide the PEM-formatted certificate here in a separate property
	 * called "certficate". That one's preferred over this filename.
	 */

	certificateFilename : "/etc/ssl/snakeoil.cert.pem",

	/**
	 * filename of certificate's key file to use on providing HTTPS
	 *
	 * You may provide the PEM-formatted key here in a separate property
	 * called "certficateKey". That one's preferred over this filename.
	 */

	certificateKeyFilename : "/etc/ssl/snakeoil.key.pem",

	/**
	 * minimum level of messages to be logged
	 *
	 * Choose one of: debug, info, error
	 */

	minLogLevel : "info",

	/**
	 * map of filename extensions into related MIME types
	 *
	 * This map is used on retrieving static files instead of executing CGI
	 * scripts.
	 *
	 * If a requested file's extension isn't included here, its content type
	 * falls back to application/octet-stream unless a special mapping for
	 * extension "*" is is choosing some other default.
	 */

	mimeTypes : {
				txt: "text/plain",
				html: "text/html",
				xhtml: "application/xhtml+xml",
				xml: "application/xml",
				xsl: "application/xslt+xml",
				js: "text/javascript",
				css: "text/css",
				jpg: "image/jpeg",
				jpeg: "image/jpeg",
				png: "image/png",
				gif: "image/gif",
				pdf: "application/pdf",
				zip: "application/zip",
				mp4: "video/mp4",
				mp3: "audio/mp3",
// choose different default MIME type by enabling and adjusting this mapping:
//				"*": "application/octet-stream"
				},

	/**
	 * rewrite rules
	 *
	 * Rewriting is affecting a request's URL internally prior to processing it.
	 * Every rule is transforming URLs by replacing matching pattern by the
	 * given replacement. Basically all rewrite rules are tested sequentially
	 * unless an actually transforming rule is requesting to stop rewriting this
	 * single URL by setting third element of rule true.
	 *
	 * @note: Keep unset or provide empty list to disable rewrite code for
	 *        slightly improved performance. Basically keep the set small for
	 *        all rules being tested on every request.
	 */

	rewrites : [
//		[ /^\/images\/(.*)$/, "/icons/$1", true ],
//		[ /^\/icons\/(.*)$/, "/icons.alt/$1" ],
//		[ /^\/(.*)$/, "/myapp/$1" ],
		],

	/**
	 * redirection rules
	 *
	 * Redirections are processed on optionally rewritten request URLs. This is
	 * done prior to processing the request. Redirections are informing client
	 * to use different URL in a succeeding re-request. That's why redirected
	 * requests aren't processed any further.
	 *
	 * @note: Keep unset or provide empty list to disable redirection code for
	 *        slightly improved performance.
	 */

	redirections : [
//			[ /^http:\/\/(www.)?mydomain.com\/(.*)$/, "https://secure.mydomain.com/www.mydomain.com/$2" ],
//			[ /^htts:\/\/(www2.)?mydomain.com\/(.*)$/, "https://secure.mydomain.com/www.mydomain.com/$2" ],
		]
};
