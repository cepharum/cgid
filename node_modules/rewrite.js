/*
 * internal URL rewriting
 *
 * @author Thomas Urban <thomas.urban@cepharum.de>
 * @package cgid
 * @license GPLv3
 */

var CONFIG = require( "config" );
var LOG    = require( "log" );

// ----------------------------------------------------------------------------

/**
 * Processes incoming requests to optionally rewrite its URL.
 *
 * @param context {Object} context of request to be processed
 * @param strUrl {String} request URL including parameters
 * @return {String} optionally rewritten URL
 */

module.exports.processRequest = function( context, strUrl ) { return strUrl; };


/*
 * set of usable rewrite rules
 */

var rewrites = [];


/*
 * validate and optimize rewrite rules
 */

var map = CONFIG.rewrites;

if ( map && map instanceof Array && map.length > 0 )
{
	// qualify all valid rules in configuration
	map.forEach( function( rule )
	{
		if ( rule instanceof Array )
		{
			// assume short form:
			// [ /pattern/, "target$1", blnStopOnMatch ]

			rewrites.push( {
				pattern: rule[0],
				target: rule[1],
				stopOnMatch: !!rule[2],
			} );
		}
		else if ( rule instanceof Object && rule && rule.pattern instanceof RegExp )
		{
			// assume long form:
			// {
			//   pattern: /pattern/,
			//   target: "target$1",
			//   stopOnMatch: true,
			// }

			// qualify mark on whether stop rewriting on matching rule or not
			rule.stopOnMatch = !!rule.stopOnMatch;

			// enqueue rule
			rewrites.push( rule );
		}
	} );


	// actually got some valid rewrites?
	if ( rewrites.length > 0 )
	{
		// yes -> enable code optionally rewriting all incoming requests
		module.exports.processRequest = function( context, strUrl )
		{
			LOG.debug( "%s: trying to rewrite URL", context.index );

			// iterate over all configured rewrites
			rewrites.some( function( rule )
			{
				var rewritten = strUrl.replace( rule.pattern, rule.target || "" );
				if ( rewritten != strUrl )
				{
					// rule has rewritten URL
					LOG.debug( "%s: rewriting %s to %s", context.index, strUrl, rewritten );

					strUrl = rewritten;

					// stop rewriting on match if declared in rule
					return rule.stopOnMatch;
				}
			} );

			// return optionally rewritten URL
			return strUrl;
		};
	}
}
