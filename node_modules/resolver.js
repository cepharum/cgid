/**
 * Request Resolver
 *
 * This module implements a method used in cgid to resolve pathname of a
 * request's URL into local pathname of file to be selected by that request.
 * It features optional support for looking up leading parts of URL pathname
 * to implicitly "rewrite" URLs
 *
 * @author Thomas Urban <thomas.urban@cepharum.de>
 * @license GPLv3
 * @package cgid
 */

var FS     = require( "fs" );
var PATH   = require( "path" );
var CONFIG = require( "config" );

// ----------------------------------------------------------------------------

// select stat() function to use on resolving every request
var fncStatter = CONFIG.followSymlinks ? FS.stat : FS.lstat;

// ----------------------------------------------------------------------------

/**
 * Resolves a given URL pathname into absolute pathname of a file addressed by
 * this URL.
 *
 * This method works asynchronously. The provided callback is invoked with these
 * arguments:
 *
 * 1. error {Object} object with properties type and message, null on success
 * 2. pathname {String} absolute pathname of matching file, null on error
 * 3. stat {FS.stats} stats on matched file, null on error
 * 4. path_info {String} additional data succeeding matching file's pathname in provided URL, null on error
 *
 * @param {String} strBasedir absolute pathname of folder containing any addressable file
 * @param {String} urlPathname pathname of URL to resolve
 * @param {Boolean} blnRequireExactMatch true if whole URL must be selecting file
 * @param {Function} fncCallback callback invoked on error or on success
 */

module.exports.resolvePathname = function( strBasedir, urlPathname, blnRequireExactMatch, fncCallback )
{
	// initially test URL pathname to be basically valid
	if ( /\.\./.test( urlPathname ) )
	{
		return fncCallback( {
			type: "invalid",
			message: "invalid pathname (containing parent reference)"
		}, null, null, null );
	}


	// strip leading slashes from provided URL pathname
	urlPathname = urlPathname.replace( /^\/+/, "" );


	// select steps for descending into filesystem starting at strBasedir
	var arrSubs;

	if ( blnRequireExactMatch )
	{
		// instantly step onto file selected by full URL's pathname
		arrSubs = [ urlPathname ];
	}
	else
	{
		// prepare to descend into filesystem folder by folder
		arrSubs = urlPathname.split( "/" ).filter( function( part ) { return String( part ).trim(); } );
	}


	// commonly report error on requested file not found
	function notfound()
	{
		fncCallback( {
				type: "notfound",
				message: "file not found"
			}, null, null, null );
	}

	var blnQualifiedIndex = false;

	// try to descend by opening next element of current folder
	function descend()
	{
		if ( arrSubs.length > 0 )
		{
			// compile pathname of subordinated element to descend into
			strBasedir = PATH.resolve( strBasedir, arrSubs.shift() );

			FS.exists( strBasedir, function( exists )
			{
				if ( exists )
				{
					// selected "file" exists
					// -> detect its type
					fncStatter( strBasedir, function( error, stat )
					{
						if ( error )
						{
							// failed to stat something existing
							// -> consider something like "permission denied"
							fncCallback( {
								type: "failed",
								message: "failed to stat " + strBasedir + ": " + String( error )
							}, null, null, null );
						}
						else if ( stat.isFile() )
						{
							// it's a file, actually
							// -> report successful match
							fncCallback( null, strBasedir, stat, arrSubs.length ? "/" + arrSubs.join( "/" ) : "" );
						}
						else if ( stat.isDirectory() )
						{
							if ( !blnQualifiedIndex && arrSubs.length == 0 )
							{
								// implicitly try index.html on addressing a directory
								blnQualifiedIndex = true;

								arrSubs.push( CONFIG.indexFilename || "index.html" );
							}

							// it's directory suitable for descending further on
							descend();
						}
						else
						{
							// all else elements (e.g. sockets and devices) are
							// considered mismatching
							notfound();
						}
					} );
				}
				else
				{
					// "file" does not exist
					notfound();
				}
			} );
		}
		else
		{
			// met end of pathname
			// -> selecting directory rather than file
			//    -> mismatch
			notfound();
		}
	}


	// start descending into filesystem
	descend();
};
